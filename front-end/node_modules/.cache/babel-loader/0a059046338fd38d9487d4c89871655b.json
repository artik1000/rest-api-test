{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"home\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Users Page\", -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_user_item = _resolveComponent(\"user-item\");\n\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.users, user => {\n    return _openBlock(), _createBlock(_component_user_item, {\n      key: user.id,\n      user: user\n    }, null, 8\n    /* PROPS */\n    , [\"user\"]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))]);\n}","map":{"version":3,"mappings":";;EACOA,KAAK,EAAC;;;gCACVC,oBAAmB,IAAnB,EAAmB,IAAnB,EAAI,YAAJ,EAAc;AAAA;AAAd;;;;;uBADDC,oBAOM,KAPN,cAOM,CANLC,UAMK,qBALJD,oBAIEE,SAJF,EAIE,IAJF,EAIEC,YAHqBC,UAGrB,EAHaC,IAAa,IAAT;yBADnBC,aAIEC,oBAJF,EAIE;MAFOC,GAAG,EAAEH,IAAI,CAACI,EAEjB;MADOJ,IAAI,EAAEA;IACb,CAJF;;IAAA;GAIE,CAJF;;EAAA,CAKI,EAPN","names":["class","_createElementVNode","_createElementBlock","_hoisted_2","_Fragment","_renderList","_ctx","user","_createBlock","_component_user_item","key","id"],"sourceRoot":"","sources":["/Users/maksimov/Documents/Проекты/rest-api-test/front-end/src/views/HomeView.vue"],"sourcesContent":["<template>\n  <div class=\"home\">\n   <h1>Users Page</h1>\n    <user-item\n            v-for=\"user in users\"\n            :key=\"user.id\"\n            :user=\"user\"\n    />\n  </div>\n</template>\n\n<script>\nimport UserItem from '@/components/UserItem'\nimport {mapState, mapMutations, mapActions} from 'vuex'\nexport default {\n  name: 'HomeView',\n  components: {\n    UserItem\n  },\n    methods: {\n        ...mapMutations({\n            addUsers: 'TestModule/addUsers'\n        }),\n        ...mapActions ({\n            fetchUsers: 'TestModule/fetchUsers'\n        }),\n\n    },\n    computed:{\n        ...mapState({\n            users: state => state.TestModule.users,\n        }),\n    },\n    mounted() {\n        this.fetchUsers();\n    },\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}